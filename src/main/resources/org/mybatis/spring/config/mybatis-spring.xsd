<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2010-2023 the original author or authors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<xsd:schema xmlns="http://mybatis.org/schema/mybatis-spring"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:tool="http://www.springframework.org/schema/tool"
  targetNamespace="http://mybatis.org/schema/mybatis-spring"
  elementFormDefault="qualified" attributeFormDefault="unqualified">

  <xsd:element name="scan">
    <xsd:annotation>
      <xsd:documentation>
        <![CDATA[
          Searches recursively starting from a base package for interfaces and registers them as MapperFactoryBeans.
          Note that only interfaces with at least one method will be registered; concrete classes will be ignored.
        ]]>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
          <xsd:element name="exclude-filter" type="filterType"
                         minOccurs="0" maxOccurs="unbounded">
              <xsd:annotation>
                  <xsd:documentation><![CDATA[
	Controls which eligible types to exclude for component scanning.
						]]></xsd:documentation>
              </xsd:annotation>
          </xsd:element>
      </xsd:sequence>
      <xsd:attribute name="base-package" type="xsd:string"
        use="required">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              The comma-separated list of packages to scan for annotated components.
            ]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="marker-interface" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              The scanner will register all interfaces in the base package that also have the specified interface class as a parent.
            ]]>
          </xsd:documentation>
          <xsd:appinfo>
            <tool:annotation>
              <tool:expected-type type="java.lang.Class" />
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="annotation" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              The scanner will register all interfaces in the base package that also have the specified annotation.
            ]]>
          </xsd:documentation>
          <xsd:appinfo>
            <tool:annotation>
              <tool:expected-type type="java.lang.Class" />
              <tool:assignable-to type="java.lang.annotation.Annotation" />
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="factory-ref" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              Specifies which SqlSessionFactory to use in the case that there is more than one in the spring context. Usually this is only needed when you have more than one datasource.
                    ]]>
          </xsd:documentation>
          <xsd:appinfo>
            <tool:annotation kind="ref">
              <tool:expected-type type="org.apache.ibatis.session.SqlSessionFactory"/>
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="template-ref" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              Specifies which SqlSessionTemplate to use in the case that there is more than one in the spring context. Usually this is only needed when you have more than one datasource.
            ]]>
          </xsd:documentation>
          <xsd:appinfo>
            <tool:annotation kind="ref">
              <tool:expected-type type="org.mybatis.spring.SqlSessionTemplate"/>
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="name-generator" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              The fully-qualified class name of the BeanNameGenerator to be used for naming detected components.
            ]]>
          </xsd:documentation>
          <xsd:appinfo>
            <tool:annotation>
              <tool:expected-type type="java.lang.Class" />
              <tool:assignable-to type="org.springframework.beans.factory.support.BeanNameGenerator" />
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="mapper-factory-bean-class" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              The fully-qualified class name of the MapperFactoryBean to return a mybatis proxy as spring bean. (Since 2.0.1)
            ]]>
          </xsd:documentation>
          <xsd:appinfo>
            <tool:annotation>
              <tool:expected-type type="java.lang.Class" />
              <tool:assignable-to type="org.mybatis.spring.mapper.MapperFactoryBean" />
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="lazy-initialization" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              Whether enable lazy initialization of mapper bean. Set true to enable lazy initialization. (Since 2.0.2)
            ]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="default-scope" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              Specifies the default scope of scanned mappers. (Since 2.0.6)
            ]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="process-property-placeholders" type="xsd:boolean">
        <xsd:annotation>
          <xsd:documentation>
            <![CDATA[
              Specifies a flag that whether execute a property placeholder processing or not. (Since 3.0.3)
              The default is true. This means that a property placeholder processing execute.
            ]]>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="filterType">
    <xsd:attribute name="type" use="required">
      <xsd:annotation>
        <xsd:documentation><![CDATA[
    Controls the type of filtering to apply to the expression.

    "annotation" indicates an annotation to be present or meta-present at the type level in target mappers;
    "assignable" indicates a class (or interface) that the target mappers are assignable to (extend/implement);
    "aspectj" indicates an AspectJ type pattern expression to be matched by the target mappers;
    "regex" indicates a regex pattern to be matched by the target mappers' class names;
    "custom" indicates a custom implementation of the org.springframework.core.type.TypeFilter interface.

    Note: This attribute will not be inherited by child bean definitions.
    Hence, it needs to be specified per concrete bean definition.
                ]]></xsd:documentation>
      </xsd:annotation>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="annotation"/>
          <xsd:enumeration value="assignable"/>
          <xsd:enumeration value="aspectj"/>
          <xsd:enumeration value="regex"/>
          <xsd:enumeration value="custom"/>
        </xsd:restriction>
      </xsd:simpleType>
    </xsd:attribute>
    <xsd:attribute name="expression" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation><![CDATA[
    Indicates the filter expression, the type of which is indicated by "type".
                ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
</xsd:schema>
